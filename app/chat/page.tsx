'use client'

import React, { useState, useRef, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  Send, 
  Paperclip, 
  Camera, 
  ArrowLeft, 
  Bot, 
  User,
  FileText,
  Image as ImageIcon,
  Loader2
} from 'lucide-react'

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  message_type: 'text' | 'food_photo' | 'analysis_file' | 'water_log'
  created_at: string
  metadata?: any
}

export default function ChatPage() {
  const router = useRouter()
  const [messages, setMessages] = useState<Message[]>([])
  const [inputText, setInputText] = useState('')
  const [loading, setLoading] = useState(false)
  const [uploadingFile, setUploadingFile] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    loadChatHistory()
  }, [])

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const loadChatHistory = async () => {
    try {
      const telegramUser = typeof window !== 'undefined' && window.Telegram?.WebApp ? 
        window.Telegram.WebApp.initDataUnsafe?.user : null
      
      const telegramId = telegramUser?.id || 6103273611 // fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

      const response = await fetch('/api/chat', {
        headers: {
          'x-telegram-user-id': telegramId.toString()
        }
      })

      const result = await response.json()

      if (result.success) {
        setMessages(result.data.messages || [])
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error)
    }
  }

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  const sendMessage = async (content: string, messageType: 'text' | 'food_photo' | 'analysis_file' = 'text', file?: File) => {
    if (!content.trim() && !file) return

    setLoading(true)

    try {
      const telegramUser = typeof window !== 'undefined' && window.Telegram?.WebApp ? 
        window.Telegram.WebApp.initDataUnsafe?.user : null
      
      const telegramId = telegramUser?.id || 6103273611

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UI —Å—Ä–∞–∑—É
      const userMessage: Message = {
        id: Date.now().toString(),
        role: 'user',
        content: content,
        message_type: messageType,
        created_at: new Date().toISOString()
      }
      setMessages(prev => [...prev, userMessage])

      const formData = new FormData()
      formData.append('content', content)
      formData.append('message_type', messageType)
      
      if (file) {
        formData.append('file', file)
      }

      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'x-telegram-user-id': telegramId.toString()
        },
        body: formData
      })

      const result = await response.json()

      if (result.success) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: result.data.response,
          message_type: 'text',
          created_at: new Date().toISOString(),
          metadata: result.data.metadata
        }
        setMessages(prev => [...prev, assistantMessage])
      } else {
        throw new Error(result.error)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage: Message = {
        id: (Date.now() + 2).toString(),
        role: 'assistant',
        content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        message_type: 'text',
        created_at: new Date().toISOString()
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setLoading(false)
    }
  }

  const handleSendText = () => {
    if (inputText.trim()) {
      const messageText = inputText.trim()
      setInputText('') // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å—Ä–∞–∑—É
      sendMessage(messageText, 'text')
    }
  }

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    setUploadingFile(true)

    try {
      const fileType = file.type
      let messageType: 'food_photo' | 'analysis_file' = 'analysis_file'
      let content = `–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${file.name}`

      if (fileType.startsWith('image/')) {
        messageType = 'food_photo'
        content = '–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
      }

      await sendMessage(content, messageType, file)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error)
    } finally {
      setUploadingFile(false)
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input
      if (fileInputRef.current) {
        fileInputRef.current.value = ''
      }
    }
  }

  const handleCameraPhoto = () => {
    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
      window.Telegram.WebApp.HapticFeedback.impactOccurred('medium')
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π input –¥–ª—è –∫–∞–º–µ—Ä—ã
    const cameraInput = document.createElement('input')
    cameraInput.type = 'file'
    cameraInput.accept = 'image/*'
    cameraInput.capture = 'environment' // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–¥–Ω—é—é –∫–∞–º–µ—Ä—É
    cameraInput.style.display = 'none'
    
    cameraInput.onchange = async (event) => {
      const file = (event.target as HTMLInputElement).files?.[0]
      if (file) {
        setUploadingFile(true)
        try {
          await sendMessage('–°–¥–µ–ª–∞–Ω–æ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', 'food_photo', file)
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error)
        } finally {
          setUploadingFile(false)
        }
      }
      // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      document.body.removeChild(cameraInput)
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM –∏ –∫–ª–∏–∫–∞–µ–º
    document.body.appendChild(cameraInput)
    cameraInput.click()
  }

  const formatTime = (dateString: string) => {
    return new Date(dateString).toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    })
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-white to-lime-50 flex flex-col">
      {/* Header */}
      <div className="bg-white border-b border-green-200/50 p-4 shadow-sm">
        <div className="flex items-center gap-3">
          <button
            onClick={() => router.back()}
            className="p-2 rounded-xl hover:bg-green-50 transition-colors"
          >
            <ArrowLeft className="w-6 h-6 text-green-600" />
          </button>
          
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-600 rounded-full flex items-center justify-center">
              <Bot className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-lg font-semibold text-gray-800">–î–∞–ï–¥–∞ AI Coach</h1>
              <p className="text-sm text-gray-500">–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫</p>
            </div>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.length === 0 ? (
          <div className="text-center py-12">
            <Bot className="w-16 h-16 text-green-400 mx-auto mb-4" />
            <h2 className="text-xl font-semibold text-gray-800 mb-2">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å –î–∞–ï–¥–∞!</h2>
            <p className="text-gray-600 max-w-md mx-auto">
              –í—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –∑–∞–≥—Ä—É–∂–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –∏–ª–∏ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –ø–∏—Ç–∞–Ω–∏–∏.
            </p>
          </div>
        ) : (
          messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${
                message.role === 'user'
                  ? 'bg-green-500 text-white rounded-br-md'
                  : 'bg-white border border-gray-200 text-gray-800 rounded-bl-md'
              }`}>
                <div className="flex items-start gap-2">
                  {message.role === 'assistant' && (
                    <Bot className="w-5 h-5 text-green-600 mt-0.5 flex-shrink-0" />
                  )}
                  
                  <div className="flex-1">
                    <p className="text-sm leading-relaxed whitespace-pre-wrap">{message.content}</p>
                    
                    {message.metadata && (
                      <div className="mt-2 text-xs opacity-75">
                        {message.metadata.analysis && (
                          <div className="bg-black/10 rounded-lg p-2 mt-2">
                            <p>üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</p>
                          </div>
                        )}
                      </div>
                    )}
                    
                    <div className={`text-xs mt-1 ${
                      message.role === 'user' ? 'text-green-100' : 'text-gray-500'
                    }`}>
                      {formatTime(message.created_at)}
                    </div>
                  </div>
                  
                  {message.role === 'user' && (
                    <User className="w-5 h-5 text-green-100 mt-0.5 flex-shrink-0" />
                  )}
                </div>
              </div>
            </div>
          ))
        )}
        
        {loading && (
          <div className="flex justify-start">
            <div className="bg-white border border-gray-200 rounded-2xl rounded-bl-md px-4 py-3 max-w-xs">
              <div className="flex items-center gap-2">
                <Bot className="w-5 h-5 text-green-600" />
                <div className="flex gap-1">
                  <Loader2 className="w-4 h-4 animate-spin text-green-600" />
                  <span className="text-sm text-gray-600">–î–∞–ï–¥–∞ –¥—É–º–∞–µ—Ç...</span>
                </div>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input Area */}
      <div className="bg-white border-t border-green-200/50 p-3">
        <div className="flex items-center gap-1.5">
          {/* File Upload Button */}
          <button
            onClick={() => fileInputRef.current?.click()}
            disabled={uploadingFile || loading}
            className="p-1.5 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors disabled:opacity-50 flex-shrink-0"
            title="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"
          >
            {uploadingFile ? (
              <Loader2 className="w-4 h-4 animate-spin text-gray-600" />
            ) : (
              <Paperclip className="w-4 h-4 text-gray-600" />
            )}
          </button>

          {/* Camera Button */}
          <button
            onClick={handleCameraPhoto}
            disabled={loading || uploadingFile}
            className="p-1.5 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors disabled:opacity-50 flex-shrink-0"
            title="–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É"
          >
            <Camera className="w-4 h-4 text-gray-600" />
          </button>

          {/* Text Input */}
          <textarea
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault()
                handleSendText()
              }
            }}
            placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ..."
            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-green-500 focus:border-transparent text-sm"
            rows={1}
            style={{ minHeight: '36px', maxHeight: '80px' }}
          />
          
          {/* Send Button */}
          <button
            onClick={handleSendText}
            disabled={!inputText.trim() || loading}
            className="p-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-300 text-white rounded-lg transition-colors disabled:cursor-not-allowed flex-shrink-0"
          >
            <Send className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Hidden File Input */}
      <input
        ref={fileInputRef}
        type="file"
        accept="image/*,.pdf,.txt,.doc,.docx"
        onChange={handleFileUpload}
        className="hidden"
      />
    </div>
  )
} 