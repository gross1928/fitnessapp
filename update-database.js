const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://hftdftotumdlwifrqzes.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhmdGRmdG90dW1kbHdpZnJxemVzIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NzU4MDc5NywiZXhwIjoyMDYzMTU2Nzk3fQ.x_cDUHmtAvVz-2n5iBXqYZw_Qify_0MKCo28Nw6hZ5k';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function updateDatabase() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // 1. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ nutrition_preferences –≤ —Ç–∞–±–ª–∏—Ü—É users
    console.log('üìù –î–æ–±–∞–≤–ª—è—é –ø–æ–ª–µ nutrition_preferences –≤ —Ç–∞–±–ª–∏—Ü—É users...');
    const { error: alterError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE users ADD COLUMN IF NOT EXISTS nutrition_preferences JSONB;'
    });

    if (alterError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è nutrition_preferences:', alterError);
    } else {
      console.log('‚úÖ –ü–æ–ª–µ nutrition_preferences –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    }

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_workout_plans –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    console.log('üèãÔ∏è –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É user_workout_plans...');
    const { error: workoutTableError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS user_workout_plans (
          id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
          user_id UUID REFERENCES users(id) ON DELETE CASCADE,
          plan_data JSONB NOT NULL,
          is_active BOOLEAN DEFAULT true,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `
    });

    if (workoutTableError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã user_workout_plans:', workoutTableError);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_workout_plans —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_nutrition_plans –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    console.log('ü•ó –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É user_nutrition_plans...');
    const { error: nutritionTableError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS user_nutrition_plans (
          id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
          user_id UUID REFERENCES users(id) ON DELETE CASCADE,
          plan_data JSONB NOT NULL,
          is_active BOOLEAN DEFAULT true,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
      `
    });

    if (nutritionTableError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã user_nutrition_plans:', nutritionTableError);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_nutrition_plans —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    }

    // 4. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üìä –î–æ–±–∞–≤–ª—è—é –∏–Ω–¥–µ–∫—Å—ã...');
    const { error: indexError } = await supabase.rpc('exec_sql', {
      sql: `
        CREATE INDEX IF NOT EXISTS idx_user_workout_plans_user_id ON user_workout_plans(user_id);
        CREATE INDEX IF NOT EXISTS idx_user_nutrition_plans_user_id ON user_nutrition_plans(user_id);
        CREATE INDEX IF NOT EXISTS idx_user_workout_plans_active ON user_workout_plans(user_id, is_active);
        CREATE INDEX IF NOT EXISTS idx_user_nutrition_plans_active ON user_nutrition_plans(user_id, is_active);
      `
    });

    if (indexError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–æ–≤:', indexError);
    } else {
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    }

    // 5. –í–∫–ª—é—á–∞–µ–º RLS –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
    console.log('üîí –í–∫–ª—é—á–∞—é RLS –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    const { error: rlsError } = await supabase.rpc('exec_sql', {
      sql: `
        ALTER TABLE user_workout_plans ENABLE ROW LEVEL SECURITY;
        ALTER TABLE user_nutrition_plans ENABLE ROW LEVEL SECURITY;
      `
    });

    if (rlsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ RLS:', rlsError);
    } else {
      console.log('‚úÖ RLS –≤–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    }

    // 6. –°–æ–∑–¥–∞–µ–º RLS –ø–æ–ª–∏—Ç–∏–∫–∏
    console.log('üõ°Ô∏è –°–æ–∑–¥–∞—é RLS –ø–æ–ª–∏—Ç–∏–∫–∏...');
    const { error: policyError } = await supabase.rpc('exec_sql', {
      sql: `
        DROP POLICY IF EXISTS "Users own workout plans" ON user_workout_plans;
        CREATE POLICY "Users own workout plans" ON user_workout_plans
          FOR ALL USING (user_id = (SELECT id FROM users WHERE telegram_id = (current_setting('request.jwt.claims', true)::jsonb ->> 'telegram_id')::bigint));

        DROP POLICY IF EXISTS "Users own nutrition plans" ON user_nutrition_plans;
        CREATE POLICY "Users own nutrition plans" ON user_nutrition_plans
          FOR ALL USING (user_id = (SELECT id FROM users WHERE telegram_id = (current_setting('request.jwt.claims', true)::jsonb ->> 'telegram_id')::bigint));
      `
    });

    if (policyError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∏—Ç–∏–∫:', policyError);
    } else {
      console.log('‚úÖ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    }

    // 7. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è updated_at
    console.log('‚è∞ –°–æ–∑–¥–∞—é —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è updated_at...');
    const { error: triggerError } = await supabase.rpc('exec_sql', {
      sql: `
        DROP TRIGGER IF EXISTS update_user_workout_plans_updated_at ON user_workout_plans;
        CREATE TRIGGER update_user_workout_plans_updated_at 
          BEFORE UPDATE ON user_workout_plans 
          FOR EACH ROW 
          EXECUTE FUNCTION update_updated_at_column();

        DROP TRIGGER IF EXISTS update_user_nutrition_plans_updated_at ON user_nutrition_plans;
        CREATE TRIGGER update_user_nutrition_plans_updated_at 
          BEFORE UPDATE ON user_nutrition_plans 
          FOR EACH ROW 
          EXECUTE FUNCTION update_updated_at_column();
      `
    });

    if (triggerError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:', triggerError);
    } else {
      console.log('‚úÖ –¢—Ä–∏–≥–≥–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    }

    console.log('üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

updateDatabase(); 