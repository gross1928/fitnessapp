import { NextRequest, NextResponse } from 'next/server';
import { GeneratedPlan } from '@/types';
import { createClient } from '@supabase/supabase-js';

// Initialize Supabase client with service role for backend operations
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(req: NextRequest) {
  try {
    // We need to get the user from the request, perhaps by validating a token
    // For now, let's assume we get the user ID from the request body for simplicity,
    // but in a real app, this MUST be secured.
    const body = await req.json();
    const plan: GeneratedPlan = body.plan;
    const userId: string = body.userId;

    if (!userId) {
      return NextResponse.json({ error: 'User ID is required.' }, { status: 400 });
    }
    if (!plan) {
        return NextResponse.json({ error: 'Plan data is required.' }, { status: 400 });
    }

    // Deactivate all other active plans for this user
    const { error: updateError } = await supabase
      .from('plans')
      .update({ is_active: false })
      .eq('user_id', userId)
      .eq('is_active', true);

    if (updateError) {
      throw new Error(`Failed to deactivate old plans: ${updateError.message}`);
    }

    // The plan will be saved with a 'combined' type for now.
    const planType = 'combined';
    const goals = 'Generated by AI'; // Placeholder

    // Start a transaction
    const { data: newPlan, error: planError } = await supabase
      .from('plans')
      .insert({
        user_id: userId,
        type: planType,
        goals: goals,
        is_active: true, // Make this the currently active plan
      })
      .select('id')
      .single();

    if (planError) throw new Error(`Failed to create plan: ${planError.message}`);

    const newPlanId = newPlan.id;

    // --- Save Nutrition Plan ---
    if (plan.nutrition_plan && plan.nutrition_plan.length > 0) {
      const nutritionData = plan.nutrition_plan.flatMap(day =>
        day.meals.map(meal => ({
          plan_id: newPlanId,
          day_of_week: day.day_of_week,
          meal_type: meal.meal_type,
          description: meal.description,
          calories: meal.calories,
          protein: meal.protein,
          fats: meal.fats,
          carbs: meal.carbs,
        }))
      );
      const { error: nutritionError } = await supabase.from('nutrition_plans').insert(nutritionData);
      if (nutritionError) throw new Error(`Failed to save nutrition plan: ${nutritionError.message}`);
    }

    // --- Save Workout Plan ---
    if (plan.workout_plan && plan.workout_plan.length > 0) {
      for (const day of plan.workout_plan) {
        const { data: workoutDay, error: workoutDayError } = await supabase
          .from('workout_plans')
          .insert({
            plan_id: newPlanId,
            day_of_week: day.day_of_week,
            description: day.description,
          })
          .select('id')
          .single();
        
        if (workoutDayError) throw new Error(`Failed to save workout day: ${workoutDayError.message}`);

        if (workoutDay) {
            const exercisesData = day.exercises.map(ex => ({
              workout_plan_id: workoutDay.id,
              name: ex.name,
              sets: ex.sets,
              reps: ex.reps,
              rest_seconds: ex.rest_seconds,
            }));
    
            const { error: exercisesError } = await supabase.from('workout_exercises').insert(exercisesData);
            if (exercisesError) throw new Error(`Failed to save exercises: ${exercisesError.message}`);
        }
      }
    }

    return NextResponse.json({ message: 'Plan saved successfully', planId: newPlanId });

  } catch (error) {
    console.error('Error saving plan:', error);
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
    return NextResponse.json({ error: 'Failed to save plan.', details: errorMessage }, { status: 500 });
  }
} 