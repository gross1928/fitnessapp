import { NextRequest, NextResponse } from 'next/server'
import { createServiceRoleClient } from '@/lib/supabase'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const telegramId = request.headers.get('x-telegram-user-id')
    
    console.log('üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è telegram_id:', telegramId)
    console.log('üì± Telegram –¥–∞–Ω–Ω—ã–µ:', body)
    
    if (!telegramId) {
      return NextResponse.json(
        { success: false, error: 'Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 401 }
      )
    }

    const {
      username,
      first_name,
      last_name,
      language_code
    } = body

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º service role –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ RLS
    const supabase = createServiceRoleClient()

    // –ï–¥–∏–Ω—ã–π upsert –ø–æ telegram_id –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const upsertData = {
      telegram_id: parseInt(telegramId),
      username,
      first_name,
      last_name,
      name: first_name + (last_name ? ' ' + last_name : ''),
      // created_at –æ—Å—Ç–∞–≤–ª—è–µ–º –ë–î –ø–æ –¥–µ—Ñ–æ–ª—Ç—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
      updated_at: new Date().toISOString()
    }

    console.log('üìù Upsert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id:', upsertData.telegram_id)

    const { data: users, error } = await supabase
      .from('users')
      .upsert(upsertData, { onConflict: 'telegram_id' })
      .select()

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ upsert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      })
      return NextResponse.json(
        { 
          success: false, 
          error: `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`,
          details: error.details || '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
        },
        { status: 500 }
      )
    }

    const userRow = users && users.length > 0 ? users[0] : null

    if (!userRow) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω - –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç upsert')
      return NextResponse.json(
        { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω' },
        { status: 500 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
    const needsOnboarding = !userRow.age || 
                           !userRow.height || 
                           !userRow.gender || 
                           !userRow.current_weight || 
                           !userRow.target_weight || 
                           !userRow.goal_type || 
                           !userRow.activity_level

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ—Å–ª–µ upsert:', {
      age: !!userRow.age,
      height: !!userRow.height,
      gender: !!userRow.gender,
      current_weight: !!userRow.current_weight,
      target_weight: !!userRow.target_weight,
      goal_type: !!userRow.goal_type,
      activity_level: !!userRow.activity_level,
      needsOnboarding
    })

    return NextResponse.json({
      success: true,
      data: userRow,
      isNewUser: false,
      needsOnboarding,
      message: needsOnboarding ? '–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
    })

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    )
  }
} 