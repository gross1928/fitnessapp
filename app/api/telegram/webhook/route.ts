import { NextRequest, NextResponse } from 'next/server'
import { createServerClient } from '@/lib/supabase'

// Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { message } = body

    if (!message || !message.from) {
      return NextResponse.json({ ok: true })
    }

    const telegramId = message.from.id
    const chatId = message.chat.id
    const text = message.text || ''

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π Web App
    if (text === '/start' || text === '/app' || text === '/health') {
      await sendWebAppButton(chatId)
    }

    return NextResponse.json({ ok: true })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ webhook:', error)
    return NextResponse.json({ ok: true })
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ Web App
async function sendWebAppButton(chatId: number) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  
  if (!botToken) {
    console.error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return
  }

  const webAppUrl = process.env.NEXTAUTH_URL || 'https://your-app.railway.app'
  
  const keyboard = {
    inline_keyboard: [
      [
        {
          text: "üèÉ‚Äç‚ôÄÔ∏è –û—Ç–∫—Ä—ã—Ç—å –î–∞–ï–¥–∞ Health Coach",
          web_app: { url: webAppUrl }
        }
      ],
      [
        {
          text: "üìä –ú–æ–π –¥–∞—à–±–æ—Ä–¥",
          web_app: { url: `${webAppUrl}?page=dashboard` }
        },
        {
          text: "üçé –î–æ–±–∞–≤–∏—Ç—å –µ–¥—É", 
          web_app: { url: `${webAppUrl}?action=add_food` }
        }
      ],
      [
        {
          text: "üíß –í—ã–ø–∏—Ç—å –≤–æ–¥—ã",
          web_app: { url: `${webAppUrl}?action=add_water` }
        },
        {
          text: "üìã –ê–Ω–∞–ª–∏–∑—ã",
          web_app: { url: `${webAppUrl}?action=health_analysis` }
        }
      ]
    ]
  }

  const message = {
    chat_id: chatId,
    text: `üèÉ‚Äç‚ôÄÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–∞–ï–¥–∞!*
    
–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ—É—á –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å:

üçé *–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è* - —Ñ–æ—Ç–æ –µ–¥—ã ‚Üí –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£
üíß *–¢—Ä–µ–∫–∏–Ω–≥ –≤–æ–¥—ã* - –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞  
üìä *–î–∞—à–±–æ—Ä–¥* - –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
üìã *–ê–Ω–∞–ª–∏–∑—ã* - –∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
ü§ñ *AI-—Å–æ–≤–µ—Ç—ã* - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! üëá`,
    parse_mode: 'Markdown',
    reply_markup: keyboard
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(message),
    })

    if (!response.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', await response.text())
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ API Telegram:', error)
  }
}

// Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
export async function GET() {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  
  if (!botToken) {
    return NextResponse.json({ error: 'Bot token –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 500 })
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/getMe`)
    const botInfo = await response.json()
    
    return NextResponse.json({
      success: true,
      bot: botInfo.result,
      webhook_url: `${process.env.NEXTAUTH_URL || 'https://your-app.railway.app'}/api/telegram/webhook`
    })
  } catch (error) {
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ' }, { status: 500 })
  }
} 