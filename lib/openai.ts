import OpenAI from 'openai'
import { OpenAIFoodAnalysis, OpenAIHealthAnalysis } from '@/types'

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
export const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á
const FOOD_ANALYSIS_PROMPT = `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

1. –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (—Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
2. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –Ω–∞ 100–≥
3. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ë–ñ–£ –Ω–∞ 100–≥:
   - –ë–µ–ª–∫–∏ (–≥)
   - –ñ–∏—Ä—ã (–≥) 
   - –£–≥–ª–µ–≤–æ–¥—ã (–≥)
4. –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ (0-100%)
5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ—Ä—Ü–∏—è–º
6. –ü–æ–ª–µ–∑–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

–û—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
{
  "detected_food": "–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞",
  "confidence": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
  "estimated_calories": —á–∏—Å–ª–æ,
  "estimated_nutrition": {
    "proteins": —á–∏—Å–ª–æ,
    "fats": —á–∏—Å–ª–æ, 
    "carbs": —á–∏—Å–ª–æ
  },
  "serving_suggestions": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"],
  "health_notes": ["–∑–∞–º–µ—Ç–∫–∞ 1", "–∑–∞–º–µ—Ç–∫–∞ 2"]
}
`

const HEALTH_ANALYSIS_PROMPT = `
–¢—ã - –≤—Ä–∞—á-—Ç–µ—Ä–∞–ø–µ–≤—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "analysis_type": "—Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ (–∫—Ä–æ–≤—å/–º–æ—á–∞/–≥–æ—Ä–º–æ–Ω—ã/–æ–±—â–∏–π)",
  "key_findings": ["–∫–ª—é—á–µ–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞ 1", "–∫–ª—é—á–µ–≤–∞—è –Ω–∞—Ö–æ–¥–∫–∞ 2"],
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"],
  "risk_factors": ["—Ñ–∞–∫—Ç–æ—Ä —Ä–∏—Å–∫–∞ 1", "—Ñ–∞–∫—Ç–æ—Ä —Ä–∏—Å–∫–∞ 2"],
  "follow_up_suggestions": ["—á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ 1", "—á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ 2"],
  "overall_assessment": "–æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è"
}

–í–∞–∂–Ω–æ: –¢–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞.
`

const AI_COACH_PROMPT = `
–¢—ã - –î–∞–ï–¥–∞, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∫–æ—É—á –ø–æ –∑–¥–æ—Ä–æ–≤—å—é –∏ –ø–∏—Ç–∞–Ω–∏—é. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–æ—Å—Ç–∏–≥–∞—Ç—å –∏—Ö —Ü–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—å—è, –ø–∏—Ç–∞–Ω–∏—è –∏ —Ñ–∏—Ç–Ω–µ—Å–∞.

–¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π
- –ì–æ–≤–æ—Ä–∏—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –î–∞—ë—à—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
- –£—á–∏—Ç—ã–≤–∞–µ—à—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ü–æ–æ—â—Ä—è–µ—à—å –∑–¥–æ—Ä–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
- –ù–µ –¥–∞—ë—à—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤, –Ω–æ –º–æ–∂–µ—à—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ

–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–º —Ç–æ–Ω–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
`

// –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ–¥—ã
export async function analyzeFoodImage(imageBase64: string): Promise<OpenAIFoodAnalysis> {
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o", // –ó–∞–º–µ–Ω–µ–Ω–æ —Å gpt-4-vision-preview –Ω–∞ –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å
      messages: [
        {
          role: "system",
          content: FOOD_ANALYSIS_PROMPT
        },
        {
          role: "user",
          content: [
            {
              type: "text",
              text: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –µ–¥—É –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£:"
            },
            {
              type: "image_url",
              image_url: {
                url: `data:image/jpeg;base64,${imageBase64}`,
                detail: "high"
              }
            }
          ]
        }
      ],
      max_tokens: 1000,
      temperature: 0.3,
    })

    const content = response.choices[0]?.message?.content
    if (!content) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI')
    }

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç, —É–±–∏—Ä–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    let cleanContent = content.trim()
    
    // –£–±–∏—Ä–∞–µ–º markdown code blocks –µ—Å–ª–∏ –µ—Å—Ç—å
    if (cleanContent.startsWith('```json')) {
      cleanContent = cleanContent.replace(/^```json\s*/, '').replace(/\s*```$/, '')
    } else if (cleanContent.startsWith('```')) {
      cleanContent = cleanContent.replace(/^```\s*/, '').replace(/\s*```$/, '')
    }
    
    const analysis = JSON.parse(cleanContent) as OpenAIFoodAnalysis
    return analysis
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –µ–¥—ã:', error)
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã')
  }
}

// –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã
export async function analyzeFoodText(foodDescription: string): Promise<OpenAIFoodAnalysis> {
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
      messages: [
        {
          role: "system",
          content: FOOD_ANALYSIS_PROMPT
        },
        {
          role: "user",
          content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£: "${foodDescription}"`
        }
      ],
      max_tokens: 1000,
      temperature: 0.3,
    })

    const content = response.choices[0]?.message?.content
    if (!content) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI')
    }

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç, —É–±–∏—Ä–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    let cleanContent = content.trim()
    
    // –£–±–∏—Ä–∞–µ–º markdown code blocks –µ—Å–ª–∏ –µ—Å—Ç—å
    if (cleanContent.startsWith('```json')) {
      cleanContent = cleanContent.replace(/^```json\s*/, '').replace(/\s*```$/, '')
    } else if (cleanContent.startsWith('```')) {
      cleanContent = cleanContent.replace(/^```\s*/, '').replace(/\s*```$/, '')
    }
    
    const analysis = JSON.parse(cleanContent) as OpenAIFoodAnalysis
    return analysis
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞ –µ–¥—ã:', error)
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã')
  }
}

// –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
export async function analyzeHealthData(
  data: string, 
  analysisType: 'blood' | 'urine' | 'hormones' | 'general'
): Promise<OpenAIHealthAnalysis> {
  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini", // –ó–∞–º–µ–Ω–µ–Ω–æ —Å gpt-4 –Ω–∞ –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å
      messages: [
        {
          role: "system",
          content: HEALTH_ANALYSIS_PROMPT
        },
        {
          role: "user",
          content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ (${analysisType}):\n\n${data}`
        }
      ],
      max_tokens: 2000,
      temperature: 0.2,
    })

    const content = response.choices[0]?.message?.content
    if (!content) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI')
    }

    const analysis = JSON.parse(content) as OpenAIHealthAnalysis
    return analysis
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ')
  }
}

// AI –∫–æ—É—á —á–∞—Ç
export async function getChatResponse(
  messages: Array<{ role: 'user' | 'assistant'; content: string }>,
  userContext?: {
    name?: string
    age?: number
    height?: number
    goals?: string
    currentWeight?: number
    targetWeight?: number
    activityLevel?: string
    dailyCalorieTarget?: number
    dailyProteinTarget?: number
    dailyFatTarget?: number
    dailyCarbTarget?: number
    dailyWaterTarget?: number
    todayNutrition?: {
      calories: number
      proteins: number
      fats: number
      carbs: number
      water: number
      mealsCount: number
    }
    todayMeals?: Array<{
      food: string
      mealType: string
      amount: number
      calories: number
      time: string
    }>
    recentHealthAnalyses?: Array<{
      type: string
      keyFindings: string[]
      date: string
    }>
    weightProgress?: Array<{
      weight: number
      date: string
    }>
  }
): Promise<string> {
  try {
    let contextPrompt = ''
    
    if (userContext) {
      contextPrompt = `
–ü–û–õ–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:

üßë‚Äçüíº –õ–ò–ß–ù–´–ï –î–ê–ù–ù–´–ï:
- –ò–º—è: ${userContext.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –í–æ–∑—Ä–∞—Å—Ç: ${userContext.age || '–ù–µ —É–∫–∞–∑–∞–Ω'} –ª–µ—Ç
- –†–æ—Å—Ç: ${userContext.height || '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º
- –¢–µ–∫—É—â–∏–π –≤–µ—Å: ${userContext.currentWeight || '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
- –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: ${userContext.targetWeight || '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
- –¶–µ–ª—å: ${userContext.goals || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
- –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${userContext.activityLevel || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üéØ –î–ù–ï–í–ù–´–ï –¶–ï–õ–ò –ü–û –ü–ò–¢–ê–ù–ò–Æ:
- –ö–∞–ª–æ—Ä–∏–∏: ${userContext.dailyCalorieTarget || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'} –∫–∫–∞–ª
- –ë–µ–ª–∫–∏: ${userContext.dailyProteinTarget || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'} –≥
- –ñ–∏—Ä—ã: ${userContext.dailyFatTarget || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'} –≥
- –£–≥–ª–µ–≤–æ–¥—ã: ${userContext.dailyCarbTarget || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'} –≥
- –í–æ–¥–∞: ${userContext.dailyWaterTarget || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'} –º–ª

üìä –ü–û–ö–ê–ó–ê–¢–ï–õ–ò –°–ï–ì–û–î–ù–Ø:
${userContext.todayNutrition ? `
- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: ${userContext.todayNutrition.calories}/${userContext.dailyCalorieTarget || '?'} –∫–∫–∞–ª (${userContext.dailyCalorieTarget ? Math.round((userContext.todayNutrition.calories / userContext.dailyCalorieTarget) * 100) : '?'}%)
- –ë–µ–ª–∫–∏: ${userContext.todayNutrition.proteins}/${userContext.dailyProteinTarget || '?'} –≥
- –ñ–∏—Ä—ã: ${userContext.todayNutrition.fats}/${userContext.dailyFatTarget || '?'} –≥  
- –£–≥–ª–µ–≤–æ–¥—ã: ${userContext.todayNutrition.carbs}/${userContext.dailyCarbTarget || '?'} –≥
- –í–æ–¥–∞: ${userContext.todayNutrition.water}/${userContext.dailyWaterTarget || '?'} –º–ª
- –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: ${userContext.todayNutrition.mealsCount}
` : '–î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}

üçΩÔ∏è –ß–¢–û –ï–õ –°–ï–ì–û–î–ù–Ø:
${userContext.todayMeals && userContext.todayMeals.length > 0 ? 
  userContext.todayMeals.map(meal => 
    `- ${meal.time}: ${meal.food} (${meal.mealType}) - ${meal.amount}–≥, ${meal.calories} –∫–∫–∞–ª`
  ).join('\n') 
  : '–ï—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –µ–ª —Å–µ–≥–æ–¥–Ω—è'}

üìã –ù–ï–î–ê–í–ù–ò–ï –ê–ù–ê–õ–ò–ó–´ –ó–î–û–†–û–í–¨–Ø:
${userContext.recentHealthAnalyses && userContext.recentHealthAnalyses.length > 0 ?
  userContext.recentHealthAnalyses.map(analysis => 
    `- ${analysis.date}: ${analysis.type} - ${analysis.keyFindings.join(', ')}`
  ).join('\n')
  : '–ê–Ω–∞–ª–∏–∑—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}

‚öñÔ∏è –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í–ï–°–ê:
${userContext.weightProgress && userContext.weightProgress.length > 0 ?
  userContext.weightProgress.map(entry => 
    `- ${entry.date}: ${entry.weight} –∫–≥`
  ).join('\n')
  : '–î–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –í–°–Æ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤! –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª—è–º.
`
    }

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini", // –ó–∞–º–µ–Ω–µ–Ω–æ —Å gpt-4 –Ω–∞ –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å
      messages: [
        {
          role: "system",
          content: AI_COACH_PROMPT + contextPrompt
        },
        ...messages
      ],
      max_tokens: 1500,
      temperature: 0.7,
    })

    const content = response.choices[0]?.message?.content
    if (!content) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∫–æ—É—á–∞')
    }

    return content
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ AI –∫–æ—É—á–µ:', error)
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –∫–æ—É—á–∞')
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
export async function generatePersonalizedRecommendations(
  userProfile: {
    age: number
    height: number
    currentWeight: number
    targetWeight: number
    activityLevel: string
    goalType: string
    healthConditions?: string[]
    allergies?: string[]
  }
): Promise<{
  dailyCalories: number
  dailyProteins: number
  dailyFats: number
  dailyCarbs: number
  dailyWater: number
  recommendations: string[]
}> {
  try {
    const prompt = `
–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:

–§–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:
- –í–æ–∑—Ä–∞—Å—Ç: ${userProfile.age} –ª–µ—Ç
- –†–æ—Å—Ç: ${userProfile.height} —Å–º
- –¢–µ–∫—É—â–∏–π –≤–µ—Å: ${userProfile.currentWeight} –∫–≥
- –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: ${userProfile.targetWeight} –∫–≥
- –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${userProfile.activityLevel}
- –¶–µ–ª—å: ${userProfile.goalType}

${userProfile.healthConditions?.length ? `–ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: ${userProfile.healthConditions.join(', ')}` : ''}
${userProfile.allergies?.length ? `–ê–ª–ª–µ—Ä–≥–∏–∏: ${userProfile.allergies.join(', ')}` : ''}

–†–∞—Å—Å—á–∏—Ç–∞–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "dailyCalories": —á–∏—Å–ª–æ,
  "dailyProteins": —á–∏—Å–ª–æ –≤ –≥—Ä–∞–º–º–∞—Ö,
  "dailyFats": —á–∏—Å–ª–æ –≤ –≥—Ä–∞–º–º–∞—Ö,
  "dailyCarbs": —á–∏—Å–ª–æ –≤ –≥—Ä–∞–º–º–∞—Ö,
  "dailyWater": —á–∏—Å–ª–æ –≤ –º–ª,
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 3"]
}
`

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini", // –ó–∞–º–µ–Ω–µ–Ω–æ —Å gpt-4 –Ω–∞ –±–æ–ª–µ–µ –¥–µ—à–µ–≤—É—é –º–æ–¥–µ–ª—å
      messages: [
        {
          role: "system",
          content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–π –Ω–æ—Ä–º—ã –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—É—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      max_tokens: 1000,
      temperature: 0.3,
    })

    const content = response.choices[0]?.message?.content
    if (!content) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
    }

    return JSON.parse(content)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error)
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
  }
} 