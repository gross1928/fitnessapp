import { NextRequest, NextResponse } from 'next/server'
import { createServiceRoleClient } from '@/lib/supabase'
import { calculateBMR, calculateTDEE } from '@/lib/utils'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const telegramId = request.headers.get('x-telegram-user-id')
    
    console.log('üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è telegram_id:', telegramId)
    console.log('üìù –î–∞–Ω–Ω—ã–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞:', body)
    
    if (!telegramId) {
      return NextResponse.json(
        { success: false, error: 'Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 401 }
      )
    }

    const {
      telegram_username,
      name,
      age,
      height,
      gender,
      current_weight,
      target_weight,
      goal_timeframe,
      activity_level,
      goal
    } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !age || !height || !gender || !current_weight || !target_weight || !goal) {
      console.error('‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã:', {
        name: !!name,
        age: !!age,
        height: !!height,
        gender: !!gender,
        current_weight: !!current_weight,
        target_weight: !!target_weight,
        goal: !!goal
      })
      return NextResponse.json(
        { success: false, error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' },
        { status: 400 }
      )
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º service role –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ RLS
    const supabase = createServiceRoleClient()

    // –ú–∞–ø–ø–∏–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è goal –≤ –ø–æ–ª–Ω—ã–µ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const goalTypeMapping: { [key: string]: string } = {
      'lose': 'lose_weight',
      'gain': 'gain_weight', 
      'maintain': 'maintain_weight'
    }
    
    const mappedGoalType = goalTypeMapping[goal] || goal

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const bmr = calculateBMR(current_weight, height, age, gender)
    const tdee = calculateTDEE(bmr, activity_level)
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ü–µ–ª–∏
    let dailyCalories = tdee
    if (goal === 'lose') {
      dailyCalories = tdee - 500 // –¥–µ—Ñ–∏—Ü–∏—Ç 500 –∫–∫–∞–ª –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è
    } else if (goal === 'gain') {
      dailyCalories = tdee + 500 // –ø—Ä–æ—Ñ–∏—Ü–∏—Ç 500 –∫–∫–∞–ª –¥–ª—è –Ω–∞–±–æ—Ä–∞ –≤–µ—Å–∞
    }

    console.log('üßÆ –†–∞—Å—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { bmr, tdee, dailyCalories })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const { data: existingUsers, error: checkError } = await supabase
      .from('users')
      .select('id')
      .eq('telegram_id', parseInt(telegramId))

    if (checkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', checkError)
      return NextResponse.json(
        { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' },
        { status: 500 }
      )
    }

    const existingUser = existingUsers && existingUsers.length > 0 ? existingUsers[0] : null

    if (existingUser) {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', existingUser.id)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: users, error } = await supabase
        .from('users')
        .update({
          username: telegram_username,
          name,
          age,
          height,
          gender,
          current_weight,
          target_weight,
          goal_deadline: goal_timeframe ? new Date(Date.now() + goal_timeframe * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] : null,
          activity_level,
          goal_type: mappedGoalType,
          daily_calorie_target: Math.round(dailyCalories),
          daily_protein_target: Math.round(current_weight * 2), // 2–≥ –±–µ–ª–∫–∞ –Ω–∞ –∫–≥ –≤–µ—Å–∞
          daily_fat_target: Math.round(dailyCalories * 0.25 / 9), // 25% –æ—Ç –∫–∞–ª–æ—Ä–∏–π
          daily_carb_target: Math.round((dailyCalories - (current_weight * 2 * 4) - (dailyCalories * 0.25)) / 4), // –æ—Å—Ç–∞–ª—å–Ω–æ–µ
          daily_water_target: Math.round(current_weight * 35), // 35–º–ª –Ω–∞ –∫–≥ –≤–µ—Å–∞
          updated_at: new Date().toISOString()
        })
        .eq('telegram_id', parseInt(telegramId))
        .select()

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
        console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code
        })
        return NextResponse.json(
          { 
            success: false, 
            error: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`,
            details: error.details || '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
          },
          { status: 500 }
        )
      }

      if (!users || users.length === 0) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
        return NextResponse.json(
          { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' },
          { status: 404 }
        )
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω')
      return NextResponse.json({
        success: true,
        data: users[0],
        message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!'
      })
    } else {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUserData = {
        telegram_id: parseInt(telegramId),
        username: telegram_username,
        name,
        age,
        height,
        gender,
        current_weight,
        target_weight,
        goal_deadline: goal_timeframe ? new Date(Date.now() + goal_timeframe * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] : null,
        activity_level,
        goal_type: mappedGoalType,
        daily_calorie_target: Math.round(dailyCalories),
        daily_protein_target: Math.round(current_weight * 2),
        daily_fat_target: Math.round(dailyCalories * 0.25 / 9),
        daily_carb_target: Math.round((dailyCalories - (current_weight * 2 * 4) - (dailyCalories * 0.25)) / 4),
        daily_water_target: Math.round(current_weight * 35)
      }

      console.log('üìù –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', newUserData)

      const { data: users, error } = await supabase
        .from('users')
        .insert(newUserData)
        .select()

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
        console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è:', {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code
        })
        return NextResponse.json(
          { 
            success: false, 
            error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`,
            details: error.details || '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
          },
          { status: 500 }
        )
      }

      if (!users || users.length === 0) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω')
        return NextResponse.json(
          { success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω' },
          { status: 500 }
        )
      }

      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', users[0].id)
      return NextResponse.json({
        success: true,
        data: users[0],
        message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –î–∞–ï–¥–∞! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.'
      })
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', error)
    return NextResponse.json(
      { 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    )
  }
} 