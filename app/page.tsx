'use client'

import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  Heart, 
  Droplets, 
  Apple, 
  Weight, 
  Moon, 
  FileText, 
  Plus,
  TrendingUp,
  Calendar,
  Target,
  Activity
} from 'lucide-react'



function MetricCard({ 
  title, 
  value, 
  target, 
  unit, 
  icon, 
  color,
  trend 
}: {
  title: string
  value: number
  target?: number
  unit: string
  icon: React.ReactNode
  color: string
  trend?: { value: number; isPositive: boolean }
}) {
  const percentage = target ? Math.min((value / target) * 100, 100) : 100
  
  return (
    <div className={`p-4 rounded-2xl shadow-lg ${color} text-white relative overflow-hidden card-hover`}>
      <div className="absolute inset-0 bg-gradient-to-br from-white/10 to-transparent" />
      <div className="relative z-10">
        <div className="flex items-center justify-between mb-3">
          <div className="p-2 bg-white/20 rounded-xl">
            {icon}
          </div>
          {trend && (
            <div className={`flex items-center text-sm ${trend.isPositive ? 'text-green-100' : 'text-red-100'}`}>
              <TrendingUp className={`w-4 h-4 mr-1 ${!trend.isPositive && 'rotate-180'}`} />
              {Math.abs(trend.value)}%
            </div>
          )}
        </div>
        
        <h3 className="text-sm font-medium opacity-90 mb-1">{title}</h3>
        <div className="flex items-end justify-between">
          <div>
            <span className="text-2xl font-bold">{value.toLocaleString('ru-RU')}</span>
            <span className="text-sm opacity-80 ml-1">{unit}</span>
          </div>
          {target && (
            <span className="text-xs opacity-70">–∏–∑ {target.toLocaleString('ru-RU')}</span>
          )}
        </div>
        
        {target && (
          <div className="mt-3">
            <div className="w-full bg-white/20 rounded-full h-2">
              <div 
                className="bg-white rounded-full h-2 transition-all duration-500" 
                style={{ width: `${percentage}%` }}
              />
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

function QuickActionButton({ 
  icon, 
  label, 
  onClick,
  color = 'bg-white'
}: {
  icon: React.ReactNode
  label: string
  onClick: () => void
  color?: string
}) {
  return (
    <button
      onClick={onClick}
      className={`${color} p-4 rounded-2xl shadow-md hover:shadow-lg transition-all duration-300 hover:scale-105 border border-gray-100`}
    >
      <div className="text-gray-600 mb-2 flex justify-center">
        {icon}
      </div>
      <p className="text-sm font-medium text-gray-800 text-center">{label}</p>
    </button>
  )
}



export default function DashboardPage() {
  const router = useRouter()
  const [currentTime, setCurrentTime] = useState(new Date())
  const [user, setUser] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  
  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 60000)
    return () => clearInterval(timer)
  }, [])

  useEffect(() => {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const initializeUser = async () => {
      try {
        if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
          const tg = window.Telegram.WebApp
          tg.ready()
          
          const telegramUser = tg.initDataUnsafe?.user
          if (!telegramUser?.id) {
            console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            setLoading(false)
            return
          }

          console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUser)

          // –í—ã–∑—ã–≤–∞–µ–º API –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          const registerResponse = await fetch('/api/users/register', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'x-telegram-user-id': telegramUser.id.toString()
            },
            body: JSON.stringify({
              username: telegramUser.username,
              first_name: telegramUser.first_name,
              last_name: telegramUser.last_name,
              language_code: telegramUser.language_code
            })
          })

          if (registerResponse.ok) {
            const registerData = await registerResponse.json()
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerData)
            
            if (registerData.success) {
              console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', {
                needsOnboarding: registerData.needsOnboarding,
                isNewUser: registerData.isNewUser,
                message: registerData.message
              })
              
              if (registerData.needsOnboarding) {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–µ–Ω –æ–Ω–±–æ—Ä–¥–∏–Ω–≥, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º...')
                router.push('/onboarding')
                return
              } else {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—à–±–æ—Ä–¥')
                setUser(registerData.data)
              }
            } else {
              console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerData.error)
            }
          } else {
            const errorData = await registerResponse.json()
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', errorData)
          }
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç Telegram WebApp, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
          console.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤–Ω–µ Telegram')
          setLoading(false)
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      } finally {
        setLoading(false)
      }
    }

    initializeUser()
  }, [router])

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      </div>
    )
  }
  
  const timeOfDay = currentTime.getHours() < 12 ? '—É—Ç—Ä–æ–º' : 
                   currentTime.getHours() < 18 ? '–¥–Ω–µ–º' : '–≤–µ—á–µ—Ä–æ–º'

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç —Ü–µ–ª–µ–π –ø–æ –ø–∏—Ç–∞–Ω–∏—é - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
  if (user && (!user.daily_calorie_target || !user.goal_type)) {
    console.log('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ü–µ–ª–µ–π –ø–æ –ø–∏—Ç–∞–Ω–∏—é, –Ω—É–∂–µ–Ω –æ–Ω–±–æ—Ä–¥–∏–Ω–≥')
    router.push('/onboarding')
    return null
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center p-4">
        <div className="text-center max-w-md">
          <h1 className="text-3xl font-bold text-gray-800 mb-4">–î–∞–ï–¥–∞</h1>
          <p className="text-gray-600 mb-6">
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
          </p>
          <div className="p-6 bg-white rounded-2xl shadow-lg border border-gray-100">
            <p className="text-sm text-gray-500">
              –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞–∫ Telegram WebApp
            </p>
          </div>
        </div>
      </div>
    )
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ –º–æ–∫–æ–≤
  const todayData = {
    calories: { current: 0, target: user.daily_calorie_target || 2000 },
    proteins: { current: 0, target: user.daily_protein_target || 100 },
    fats: { current: 0, target: user.daily_fat_target || 60 },
    carbs: { current: 0, target: user.daily_carb_target || 200 },
    water: { current: 0, target: user.daily_water_target || 2000 },
    weight: user.current_weight || 0,
    steps: 0
  }
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 p-4">
      <div className="max-w-lg mx-auto space-y-6">
        {/* Header */}
        <div className="text-center pt-4 pb-2">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">
            –î–∞–ï–¥–∞
          </h1>
          <p className="text-gray-600">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! 
            <br />
            –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è {timeOfDay} üëã
          </p>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-2 gap-4">
          <MetricCard
            title="–ö–∞–ª–æ—Ä–∏–∏"
            value={todayData.calories.current}
            target={todayData.calories.target}
            unit="–∫–∫–∞–ª"
            icon={<Apple className="w-6 h-6" />}
            color="gradient-orange"
          />
          
          <MetricCard
            title="–í–æ–¥–∞"
            value={todayData.water.current}
            target={todayData.water.target}
            unit="–º–ª"
            icon={<Droplets className="w-6 h-6" />}
            color="gradient-blue"
          />
        </div>

        {/* Nutrition breakdown */}
        <div className="grid grid-cols-3 gap-3">
          <MetricCard
            title="–ë–µ–ª–∫–∏"
            value={todayData.proteins.current}
            target={todayData.proteins.target}
            unit="–≥"
            icon={<div className="w-6 h-6 bg-white rounded-full flex items-center justify-center text-orange-500 font-bold">–ë</div>}
            color="bg-orange-400"
          />
          
          <MetricCard
            title="–ñ–∏—Ä—ã"
            value={todayData.fats.current}
            target={todayData.fats.target}
            unit="–≥"
            icon={<div className="w-6 h-6 bg-white rounded-full flex items-center justify-center text-yellow-500 font-bold">–ñ</div>}
            color="bg-yellow-400"
          />
          
          <MetricCard
            title="–£–≥–ª–µ–≤–æ–¥—ã"
            value={todayData.carbs.current}
            target={todayData.carbs.target}
            unit="–≥"
            icon={<div className="w-6 h-6 bg-white rounded-full flex items-center justify-center text-green-500 font-bold">–£</div>}
            color="bg-green-400"
          />
        </div>

        {/* Other metrics */}
        <div className="grid grid-cols-2 gap-4">
          <MetricCard
            title="–¢–µ–∫—É—â–∏–π –≤–µ—Å"
            value={todayData.weight}
            unit="–∫–≥"
            icon={<Weight className="w-6 h-6" />}
            color="gradient-green"
          />
          
          <MetricCard
            title="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
            value={todayData.steps}
            unit="—à–∞–≥–æ–≤"
            icon={<Activity className="w-6 h-6" />}
            color="gradient-purple"
          />
        </div>

        {/* Quick Actions */}
        <div className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
          <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
            <Plus className="w-5 h-5 mr-2 text-primary" />
            –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
          </h3>
          
          <div className="grid grid-cols-3 gap-3">
            <QuickActionButton
              icon={<Apple className="w-6 h-6" />}
              label="–î–æ–±–∞–≤–∏—Ç—å –µ–¥—É"
              onClick={() => console.log('Add food')}
            />
            
            <QuickActionButton
              icon={<Droplets className="w-6 h-6" />}
              label="–í—ã–ø–∏—Ç—å –≤–æ–¥—ã"
              onClick={() => console.log('Add water')}
            />
            
            <QuickActionButton
              icon={<Weight className="w-6 h-6" />}
              label="–í–∑–≤–µ—Å–∏—Ç—å—Å—è"
              onClick={() => console.log('Add weight')}
            />
            
            <QuickActionButton
              icon={<FileText className="w-6 h-6" />}
              label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã"
              onClick={() => console.log('Upload analysis')}
            />
            
            <QuickActionButton
              icon={<Target className="w-6 h-6" />}
              label="–ú–æ–∏ —Ü–µ–ª–∏"
              onClick={() => console.log('Goals')}
            />
            
            <QuickActionButton
              icon={<Calendar className="w-6 h-6" />}
              label="–ò—Å—Ç–æ—Ä–∏—è"
              onClick={() => console.log('History')}
            />
          </div>
        </div>

        {/* Progress Chart */}
        <div className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
          <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
            <TrendingUp className="w-5 h-5 mr-2 text-primary" />
            –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é
          </h3>
          
          <div className="text-center py-8">
            <div className="text-gray-400 mb-4">
              <TrendingUp className="w-12 h-12 mx-auto" />
            </div>
            <p className="text-gray-500 text-sm">
              –ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –∏ –≤–µ—Å,<br />
              —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            </p>
          </div>
        </div>

        {/* AI Coach suggestion */}
        <div className="bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl p-6 text-white shadow-lg">
          <div className="flex items-start space-x-3">
            <div className="p-2 bg-white/20 rounded-xl flex-shrink-0">
              <Heart className="w-6 h-6" />
            </div>
            <div>
              <h4 className="font-semibold mb-2">–°–æ–≤–µ—Ç –æ—Ç –î–∞–ï–¥–∞</h4>
              <p className="text-sm opacity-90 leading-relaxed">
                –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º —Å–µ–≥–æ–¥–Ω—è. 
                –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–º–Ω–æ–≥–æ –±–µ–ª–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏. 
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥—Ä–µ—á–µ—Å–∫–∏–π –π–æ–≥—É—Ä—Ç —Å –æ—Ä–µ—Ö–∞–º–∏! ü•ú
              </p>
            </div>
          </div>
        </div>

        {/* Bottom padding for safe area */}
        <div className="h-8" />
      </div>
    </div>
  )
} 