'use client'

import React, { useState, useRef, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { 
  Camera, 
  Image, 
  Keyboard, 
  ScanLine,
  Droplets,
  Plus,
  ArrowLeft,
  Clock,
  Utensils,
  Zap
} from 'lucide-react'
import AnalysisModal from '@/components/nutrition/AnalysisModal';
import { NutritionData } from '@/types'; 

interface FoodEntry {
  id: string
  name: string
  time: string
  calories: number
  protein: number
  fat: number
  carbs: number
}



export default function AddFoodPage() {
  const router = useRouter()
  const fileInputRef = useRef<HTMLInputElement>(null)
  const [waterIntake, setWaterIntake] = useState(0)
  const [loading, setLoading] = useState<string | null>(null)
  const [todayHistory, setTodayHistory] = useState<FoodEntry[]>([])
  const [historyLoading, setHistoryLoading] = useState(true)

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<NutritionData | null>(null);
  const [analysisError, setAnalysisError] = useState<string | null>(null); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏
  const [uploadProgress, setUploadProgress] = useState(0);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadTodayHistory()
    loadWaterIntake()
  }, [])

  const loadTodayHistory = async () => {
    try {
      const telegramUser = typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user;
      
      if (!telegramUser) {
        setHistoryLoading(false);
        return;
      }

      const response = await fetch('/api/nutrition/history', {
        headers: {
          'x-telegram-user-id': telegramUser.id.toString()
        }
      })

      const result = await response.json()

      if (result.success) {
        setTodayHistory(result.data.entries)
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', result.error)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error)
    } finally {
      setHistoryLoading(false)
    }
  }

  const loadWaterIntake = async () => {
    try {
      const telegramUser = typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user;
      
      if (!telegramUser) return;
      
      const response = await fetch('/api/nutrition/water', {
        headers: {
          'x-telegram-user-id': telegramUser.id.toString()
        }
      })

      const result = await response.json()

      if (result.success) {
        setWaterIntake(result.data.totalToday)
      } else {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–¥—ã:', result.error)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–¥—ã:', error)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
  const handleSaveMeal = async (data: NutritionData) => {
    try {
      const telegramUser = typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user;
      
      if (!telegramUser) {
        throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.");
      }

      const totalWeight = Array.isArray(data.ingredients) 
        ? data.ingredients.reduce((sum, ing) => sum + ing.weight_grams, 0)
        : 100;

      const response = await fetch('/api/nutrition/save-meal', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-telegram-user-id': telegramUser.id.toString(),
        },
        body: JSON.stringify({
          food_name: data.dish_name,
          calories: data.total_nutrition.calories,
          proteins: data.total_nutrition.proteins,
          fats: data.total_nutrition.fats,
          carbs: data.total_nutrition.carbs,
          amount: totalWeight,
          raw_analysis: data,
        }),
      });

      const result = await response.json();
      
      if (result.success) {
        console.log('–ü—Ä–∏–µ–º –ø–∏—â–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        loadTodayHistory(); // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
          window.Telegram.WebApp.HapticFeedback.notificationOccurred('success');
          window.Telegram.WebApp.showAlert('‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
        }
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        window.Telegram.WebApp.HapticFeedback.notificationOccurred('error');
        window.Telegram.WebApp.showAlert('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —á–∞—Ç
  const handleSendFeedback = async (data: NutritionData, feedback: string) => {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const message = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ—â–µ —Ä–∞–∑ —ç—Ç–æ –±–ª—é–¥–æ —Å —É—á–µ—Ç–æ–º –º–æ–∏—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π:
    
    –ë–ª—é–¥–æ: ${data.dish_name}
    
    –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑:
    - –ö–∞–ª–æ—Ä–∏–∏: ${data.total_nutrition.calories} –∫–∫–∞–ª
    - –ë–µ–ª–∫–∏: ${data.total_nutrition.proteins} –≥
    - –ñ–∏—Ä—ã: ${data.total_nutrition.fats} –≥
    - –£–≥–ª–µ–≤–æ–¥—ã: ${data.total_nutrition.carbs} –≥
    
    –ú–æ–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è: ${feedback}
    
    –ü–µ—Ä–µ—Å—á–∏—Ç–∞–π –ö–ë–ñ–£ —Å —É—á–µ—Ç–æ–º —ç—Ç–∏—Ö –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π.`;

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ —Å –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
    await analyzeTextInput(message);
  };

  const handleCameraPhoto = async () => {
    setLoading('camera')
    
    try {
      // Telegram WebApp haptic feedback
      if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('medium')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–º–µ—Ä—ã –≤ Telegram
        if (navigator.mediaDevices) {
          window.Telegram.WebApp.showAlert('–§—É–Ω–∫—Ü–∏—è –∫–∞–º–µ—Ä—ã —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞! üì∏')
        } else {
          window.Telegram.WebApp.showAlert('–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ')
        }
      } else {
        alert('–§—É–Ω–∫—Ü–∏—è –∫–∞–º–µ—Ä—ã —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞! üì∏')
      }
    } catch (error) {
      console.error('Camera error:', error)
    } finally {
      setLoading(null)
    }
  }

  const handleGalleryPhoto = () => {
    setLoading('gallery')
    
    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
      window.Telegram.WebApp.HapticFeedback.impactOccurred('light')
    }
    
    fileInputRef.current?.click()
  }

  const analyzeFoodPhoto = async (file: File) => {
    setIsModalOpen(true);
    setLoading('gallery');
    setAnalysisResult(null);
    setAnalysisError(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É

    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    let progress = 0;
    const interval = setInterval(() => {
      progress += Math.random() * 10;
      if (progress > 95) {
        progress = 95; // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      }
      setUploadProgress(Math.round(progress));
    }, 200);

    try {
      const formData = new FormData()
      formData.append('food_photo', file)

      const telegramUser = typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user;
      
      if (!telegramUser) {
        throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.");
      }
      
      const response = await fetch('/api/nutrition/analyze-food', {
        method: 'POST',
        headers: {
          'x-telegram-user-id': telegramUser.id.toString()
        },
        body: formData
      })

      const result = await response.json()
      
      clearInterval(interval);
      setUploadProgress(100);

      if (result.success) {
        const analysis: NutritionData = result.data.analysis;
        setAnalysisResult(analysis);
        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - —Ç–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å–∞–º
      } else {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ:', error)
      const errorMessage = error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      setAnalysisError(errorMessage); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      
      // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
      // setIsModalOpen(false); 
    } finally {
       clearInterval(interval);
       setUploadProgress(100); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—à–µ–ª –¥–æ –∫–æ–Ω—Ü–∞
       setTimeout(() => setLoading(null), 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º –ª–æ–∞–¥–µ—Ä–∞
    }
  }

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) {
      setLoading(null)
      return
    }
    await analyzeFoodPhoto(file)
  }

  const handleManualInput = () => {
    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
      window.Telegram.WebApp.HapticFeedback.impactOccurred('medium')
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º prompt –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
      const foodDescription = prompt('–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–∏–µ–º –ø–∏—â–∏:\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–î–≤–∞ —è–π—Ü–∞, —Ç–æ—Å—Ç —Å –º–∞—Å–ª–æ–º, –∫–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º"')
      
      if (foodDescription && foodDescription.trim().length > 2) {
        analyzeTextInput(foodDescription.trim())
      }
    } else {
      const foodDescription = prompt('–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–∏–µ–º –ø–∏—â–∏:\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–î–≤–∞ —è–π—Ü–∞, —Ç–æ—Å—Ç —Å –º–∞—Å–ª–æ–º, –∫–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º"')
      
      if (foodDescription && foodDescription.trim().length > 2) {
        analyzeTextInput(foodDescription.trim())
      }
    }
  }

  const analyzeTextInput = async (description: string) => {
    setIsModalOpen(true);
    setLoading('text');
    setAnalysisResult(null);
    setAnalysisError(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É

    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    let progress = 0;
    const interval = setInterval(() => {
      progress += Math.random() * 15;
      if (progress > 95) {
        progress = 95;
      }
      setUploadProgress(Math.round(progress));
    }, 150);

    try {
      const telegramUser = typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user;
      
      if (!telegramUser) {
        throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.");
      }
      
      const response = await fetch('/api/nutrition/analyze-text', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-telegram-user-id': telegramUser.id.toString()
        },
        body: JSON.stringify({ foodDescription: description })
      })

      const result = await response.json()
      
      clearInterval(interval);
      setUploadProgress(100);

      if (result.success) {
        const analysis: NutritionData = result.data.analysis;
        setAnalysisResult(analysis);
        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - —Ç–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Å–∞–º
      } else {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞:', error);
      const errorMessage = error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
      setAnalysisError(errorMessage); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    } finally {
      setLoading(null);
    }
  };

  const handleBarcodeScanner = () => {
    setLoading('scan')
    
    const tg = typeof window !== 'undefined' ? window.Telegram?.WebApp : undefined;

    if (tg) {
      tg.HapticFeedback.impactOccurred('medium')
      
      if (tg.isVersionAtLeast('6.4')) {
        tg.showScanQrPopup({
          text: "–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥"
        }, (text) => {
          if(text) {
            tg.showAlert(`–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${text}`)
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
            setLoading(null) // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–±—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏
            return true 
          }
          setLoading(null) // –°–±—Ä–æ—Å –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
          return false
        })
      } else {
        tg.showAlert('–§—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ Telegram.')
        setLoading(null)
      }
    } else {
      alert('–°–∫–∞–Ω–µ—Ä —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Telegram')
      setLoading(null)
    }
  }

  const handleAddWater = async (amount: number) => {
    const telegramUser = typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user;
    
    if (!telegramUser) {
      alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
      return;
    }
    
    // Haptic feedback
    if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
        window.Telegram.WebApp.HapticFeedback.impactOccurred('light')
    }

    try {
      const response = await fetch('/api/nutrition/water', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-telegram-user-id': telegramUser.id.toString()
        },
        body: JSON.stringify({ amount })
      })

      const result = await response.json()

      if (result.success) {
        const newTotal = waterIntake + amount
        setWaterIntake(newTotal)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã:', error)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-800 dark:text-gray-200 p-4 font-sans flex flex-col">
      {/* Header */}
      <header className="flex items-center justify-between mb-6">
        <button onClick={() => router.back()} className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
          <ArrowLeft size={24} />
        </button>
        <h1 className="text-xl font-bold">–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏</h1>
        <div className="w-10"></div>
      </header>
      
      {/* Main Content */}
      <main className="flex-grow">
        {/* Input Options */}
        <div className="grid grid-cols-2 gap-4 mb-6">
          <button 
            disabled={!!loading}
            onClick={handleCameraPhoto} 
            className="flex flex-col items-center justify-center bg-white dark:bg-gray-800 p-4 rounded-xl shadow-md hover:shadow-lg transition-shadow disabled:opacity-50"
          >
            <Camera className="w-10 h-10 mb-2 text-orange-500" />
            <span className="font-semibold">–ö–∞–º–µ—Ä–∞</span>
          </button>
          
          <button 
            disabled={!!loading}
            onClick={handleGalleryPhoto}
            className="flex flex-col items-center justify-center bg-white dark:bg-gray-800 p-4 rounded-xl shadow-md hover:shadow-lg transition-shadow disabled:opacity-50"
          >
            <Image className="w-10 h-10 mb-2 text-orange-500" />
            <span className="font-semibold">–ì–∞–ª–µ—Ä–µ—è</span>
          </button>
          
          <button 
            disabled={!!loading}
            onClick={handleManualInput}
            className="flex flex-col items-center justify-center bg-white dark:bg-gray-800 p-4 rounded-xl shadow-md hover:shadow-lg transition-shadow disabled:opacity-50"
          >
            <Keyboard className="w-10 h-10 mb-2 text-orange-500" />
            <span className="font-semibold">–í—Ä—É—á–Ω—É—é</span>
          </button>

          <button 
            disabled={!!loading}
            onClick={handleBarcodeScanner}
            className="flex flex-col items-center justify-center bg-white dark:bg-gray-800 p-4 rounded-xl shadow-md hover:shadow-lg transition-shadow disabled:opacity-50"
          >
            <ScanLine className="w-10 h-10 mb-2 text-orange-500" />
            <span className="font-semibold">–®—Ç—Ä–∏—Ö-–∫–æ–¥</span>
          </button>
        </div>

        {/* Water Intake */}
        <div className="bg-white dark:bg-gray-800 p-4 rounded-xl shadow-md mb-6">
          <div className="flex items-center justify-between mb-2">
            <h2 className="font-bold text-lg flex items-center">
              <Droplets className="w-6 h-6 mr-2 text-blue-500" />
              –í–æ–¥–∞
            </h2>
            <span className="font-bold text-lg text-blue-500">{waterIntake} –º–ª</span>
          </div>
          <div className="grid grid-cols-4 gap-2">
            {[100, 250, 500, 750].map(amount => (
              <button 
                key={amount}
                onClick={() => handleAddWater(amount)}
                className="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 font-semibold py-2 rounded-lg flex items-center justify-center"
              >
                <Plus size={16} className="mr-1" />
                {amount}
              </button>
            ))}
          </div>
        </div>

        {/* Today's History */}
        <div>
          <h2 className="font-bold text-lg mb-2 flex items-center">
            <Clock className="w-6 h-6 mr-2 text-gray-500"/>
            –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –∏—Å—Ç–æ—Ä–∏—è
          </h2>
          {historyLoading ? (
            <div className="text-center p-4">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          ) : todayHistory.length > 0 ? (
            <div className="space-y-2">
              {todayHistory.map((entry) => (
                <div key={entry.id} className="bg-white dark:bg-gray-800 p-3 rounded-xl shadow-md flex justify-between items-center">
                  <div>
                    <p className="font-semibold">{entry.name}</p>
                    <p className="text-sm text-gray-500 dark:text-gray-400">{entry.time}</p>
                  </div>
                  <div className="text-right">
                    <p className="font-bold text-orange-500">{entry.calories} –∫–∫–∞–ª</p>
                    <div className="flex space-x-2 text-xs">
                      <span title="–ë–µ–ª–∫–∏">–ë: {entry.protein}–≥</span>
                      <span title="–ñ–∏—Ä—ã">–ñ: {entry.fat}–≥</span>
                      <span title="–£–≥–ª–µ–≤–æ–¥—ã">–£: {entry.carbs}–≥</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center p-4 bg-white dark:bg-gray-800 rounded-xl">
              <Utensils className="w-12 h-12 mx-auto text-gray-400 mb-2" />
              <p>–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è.</p>
              <p className="text-sm text-gray-500">–î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏</p>
            </div>
          )}
        </div>
      </main>
      
      {/* Hidden file input */}
      <input 
        type="file" 
        accept="image/*" 
        ref={fileInputRef}
        onChange={handleFileSelect}
        className="hidden"
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
      <AnalysisModal
        isOpen={isModalOpen}
        isLoading={loading === 'gallery' || loading === 'text'}
        analysisResult={analysisResult}
        analysisError={analysisError}
        onClose={() => {
          setIsModalOpen(false)
          setAnalysisResult(null)
          setAnalysisError(null)
        }}
        uploadProgress={uploadProgress}
        onSave={handleSaveMeal}
        onSendFeedback={handleSendFeedback}
      />
    </div>
  )
} 